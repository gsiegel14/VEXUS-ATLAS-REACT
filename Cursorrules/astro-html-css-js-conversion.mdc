---
description: 
globs: 
alwaysApply: true
---
# üîÑ Astro HTML/CSS/JS ‚Üí React Conversion Rules

## üéØ **PRIMARY GOAL**
Convert every `.astro` page into a React + MUI page with absolutely **no loss of features, text content, images, or styling intent**.

---

FILE ROOT: /Users/gabe/VEXUS ASTRO/REACT VEXUScan 

## 1Ô∏è‚É£  HTML ‚ûú JSX STRUCTURE PRESERVATION

1. **One-to-One Mapping**
   ‚Ä¢ Every semantic HTML element (&lt;header&gt;, &lt;nav&gt;, &lt;main&gt;, &lt;section&gt;, &lt;footer&gt;) must exist in the React version.  
   ‚Ä¢ Use MUI components that render the same element (`Container` ‚áí &lt;div&gt;, `Typography` ‚áí &lt;h1-h6/p&gt;).

2. **Attribute Conversion Checklist**
   | Astro Attribute | JSX Equivalent |
   |-----------------|---------------|
   | `class`         | `className`   |
   | `for`           | `htmlFor`     |
   | `onclick`       | `onClick`     |
   | `style="‚Ä¶"`    | `sx={{ ‚Ä¶ }}` or `style={{ ‚Ä¶ }}` |

3. **Preserve IDs & Anchors**  
   ‚Ä¢ IDs used for hash links (#section-id) must not change.  
   ‚Ä¢ Scroll-spy libraries rely on these anchors.

4. **Data Attributes**  
   ‚Ä¢ Copy verbatim: `data-xyz="value"` ‚áí `data-xyz="value"`.

5. **ARIA & Accessibility**  
   ‚Ä¢ Keep all `aria-*` attributes.  
   ‚Ä¢ Add missing labels discovered during audit.

---

## 2Ô∏è‚É£  CSS ‚ûú MUI STYLING STRATEGY

1. **Global Styles**  
   ‚Ä¢ Copy `/src/styles/*.css` into `src/styles/globals.css`.  
   ‚Ä¢ Import once in `app/layout.tsx`.

2. **Class-Based Styles**  
   ‚Ä¢ If a class appears ‚â•3 times ‚Üí convert to reusable MUI `sx` mixin in `src/theme/commonStyles.ts`.  
   ‚Ä¢ Else keep as global class to avoid inline duplication.

3. **Inline Styles**  
   ‚Ä¢ Prefer `sx` prop for simple objects:  
   ```tsx
   <Box sx={{ display: 'flex', gap: 2 }}>
   ```

4. **CSS Modules / SCSS**  
   ‚Ä¢ Rename `.scss` ‚Üí `.module.scss` and import in component.  
   ‚Ä¢ Scope guarantees no leakage.

5. **Animation & Keyframes**  
   ‚Ä¢ Copy `@keyframes` to `src/styles/animations.css`.  
   ‚Ä¢ Reference via `sx={{ animation: 'fadeIn 0.4s ease-out' }}`.

---

## 3Ô∏è‚É£  JAVASCRIPT ‚ûú REACT HOOKS

| Astro/Vanilla Pattern | React Equivalent |
|-----------------------|------------------|
| `<script>` in front-matter | `useEffect` / `useState` |
| `window.addEventListener`  | `useEffect(() => { ‚Ä¶ return () => ‚Ä¶ })` |
| jQuery DOM queries         | Component refs / MUI APIs |
| Global variables           | React Context / `useReducer` |

**Migration Steps:**
1. Isolate logic into pure functions in `src/utils`.  
2. Wrap side-effects inside custom hooks.  
3. Provide type-safe interfaces.

Example:
```astro
---
const handleScroll = () => { ‚Ä¶ }
---
```
```tsx
useEffect(() => {
  const handleScroll = () => { ‚Ä¶ };
  window.addEventListener('scroll', handleScroll);
  return () => window.removeEventListener('scroll', handleScroll);
}, []);
```

---

## 4Ô∏è‚É£  TEXT & CONTENT INTEGRITY

1. **Centralize Text**  
   ‚Ä¢ Extract every static string to `src/content/pageContent.ts` (see File-Structure-Plan).  
   ‚Ä¢ Provide TypeScript types (`HeroContent`, `PageContent`).

2. **Diff Verification**  
   ‚Ä¢ Use `diff-so-fancy` or VS Code diff to compare original `.astro` innerText with JSX render snapshot.  
   ‚Ä¢ No missing sentences, punctuation, or special characters.

3. **Markdown Segments**  
   ‚Ä¢ If Astro used Markdown inside components, convert to `react-markdown`.

---

## 5Ô∏è‚É£  IMAGE & ASSET GUARANTEE

1. **Follow Image-Migration-Plan.md Paths**  
   ‚Ä¢ Use new organized paths (`/images/icons/atlas-icon.png`).

2. **`next/image` or MUI `ImageList`**  
   ‚Ä¢ Provide `alt` text identical to original.  
   ‚Ä¢ Set `priority` for hero images.

3. **Automated Asset Test**  
   ```bash
   # ci/image-check.sh
   for img in $(grep -Roh "src=\"/images/[^\"]*" src/app | cut -d'"' -f2); do
     [ -f "public$img" ] || echo "üö® Missing $img" && exit 1
   done
   ```

4. **Responsive Variants**  
   ‚Ä¢ Generate WebP & 2√ó versions via Next.js image optimizer.

---

## 6Ô∏è‚É£  FEATURE PARITY CHECKLIST (per page)

- [ ] All navigation links present & functional
- [ ] Mobile menu behavior replicated
- [ ] Forms submit & validate identical rules
- [ ] Modals open/close logically
- [ ] AI endpoints called with same payload
- [ ] Airtable gallery filters & pagination working
- [ ] Scroll animations / carousels preserved
- [ ] SEO meta tags transferred (`<head>` additions via `next/head`)

Document results in `conversion-workflow.mdc` Phase 5.

---

## 7Ô∏è‚É£  AUTOMATED QUALITY GATES (ADD TO CI)

```yaml
name: Conversion QA
on: [pull_request]
jobs:
  qa:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install deps
        run: npm ci
      - name: Type Check
        run: npm run typecheck
      - name: ESLint
        run: npm run lint
      - name: Images Exist
        run: bash ci/image-check.sh
      - name: Jest
        run: npm test -- --coverage
```

---

## 8Ô∏è‚É£  SIGN-OFF DEFINITION OF DONE

1. ‚úÖ Visual diff ‚â§ 2 px deviation on desktop & mobile screenshots.  
2. ‚úÖ Lighthouse scores ‚â• 90 (PWA not required).  
3. ‚úÖ All unit tests pass with ‚â• 80 % coverage for new code.  
4. ‚úÖ Accessibility score ‚â• 90 (axe-core).  
5. ‚úÖ All items in Feature Parity Checklist checked.  
6. ‚úÖ Conversion report added to `docs/CONVERSION_LOG.md`.

Once all conditions met, mark the page **completed** in `conversion-progress.json`. üöÄ
